# source: http://localhost:8000/graphql
# timestamp: Wed Sep 12 2018 08:48:23 GMT+0200 (CEST)

input AddFormQuestionInput {
  formId: ID!
  questionId: ID!
  clientMutationId: String
}

"""
Add question at the end of form.
"""
type AddFormQuestionPayload {
  form: Form
  clientMutationId: String
}

interface Answer {
  id: ID
  question: Question!
  meta: JSONString
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
}

type AnswerEdge {
  """
  The item at the end of the edge
  """
  node: Answer

  """
  A cursor for use in pagination
  """
  cursor: String!
}

input ArchiveFormInput {
  id: ID!
  clientMutationId: String
}

type ArchiveFormPayload {
  form: Form
  clientMutationId: String
}

input ArchiveQuestionInput {
  id: ID!
  clientMutationId: String
}

type ArchiveQuestionPayload {
  question: Question
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type Document implements Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  form: Form!
  meta: JSONString!
  answers(
    before: String
    after: String
    first: Int
    last: Int
  ): AnswerConnection
}

type DocumentConnection {
  pageInfo: PageInfo!
  edges: [DocumentEdge]!
}

type DocumentEdge {
  """
  The item at the end of the edge
  """
  node: Document

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type FloatAnswer implements Answer & Node {
  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  meta: JSONString
  value: Float!
}

type Form implements Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  name: String!
  description: String
  meta: JSONString!
  isPublished: Boolean!
  isArchived: Boolean!
  questions(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    type: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
  ): QuestionConnection
  documents(
    before: String
    after: String
    first: Int
    last: Int
    form: ID
  ): DocumentConnection

  """
  The ID of the object.
  """
  id: ID!
}

type FormConnection {
  pageInfo: PageInfo!
  edges: [FormEdge]!
}

type FormEdge {
  """
  The item at the end of the edge
  """
  node: Form

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type IntegerAnswer implements Answer & Node {
  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  meta: JSONString
  value: Int!
}

"""
JSON String
"""
scalar JSONString

type ListAnswer implements Answer & Node {
  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  meta: JSONString
  value: [String]!
}

type Mutation {
  saveForm(input: SaveFormInput!): SaveFormPayload
  archiveForm(input: ArchiveFormInput!): ArchiveFormPayload
  publishForm(input: PublishFormInput!): PublishFormPayload
  addFormQuestion(input: AddFormQuestionInput!): AddFormQuestionPayload
  removeFormQuestion(input: RemoveFormQuestionInput!): RemoveFormQuestionPayload
  reorderFormQuestions(
    input: ReorderFormQuestionsInput!
  ): ReorderFormQuestionsPayload
  saveQuestion(input: SaveQuestionInput!): SaveQuestionPayload
  archiveQuestion(input: ArchiveQuestionInput!): ArchiveQuestionPayload
}

"""
An object with an ID
"""
interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

input PublishFormInput {
  id: ID
  clientMutationId: String
}

type PublishFormPayload {
  form: Form
  clientMutationId: String
}

type Query {
  allDocuments(
    before: String
    after: String
    first: Int
    last: Int
    form: ID
  ): DocumentConnection
  allForms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
  ): FormConnection
  allQuestions(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    type: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
  ): QuestionConnection

  """
  The ID of the object
  """
  node(id: ID!): Node
}

type Question implements Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  type: QuestionType!
  isRequired: String!
  isHidden: String!
  isArchived: Boolean!
  configuration: JSONString!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
}

type QuestionEdge {
  """
  The item at the end of the edge
  """
  node: Question

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum QuestionType {
  """
  checkbox
  """
  CHECKBOX

  """
  integer
  """
  INTEGER

  """
  float
  """
  FLOAT

  """
  radio
  """
  RADIO

  """
  textarea
  """
  TEXTAREA

  """
  text
  """
  TEXT
}

input RemoveFormQuestionInput {
  formId: ID!
  questionId: ID!
  clientMutationId: String
}

"""
Add question at the end of form.
"""
type RemoveFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input ReorderFormQuestionsInput {
  formId: ID!
  questionIds: [ID]!
  clientMutationId: String
}

type ReorderFormQuestionsPayload {
  form: Form
  clientMutationId: String
}

input SaveFormInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString
  clientMutationId: String
}

type SaveFormPayload {
  form: Form
  clientMutationId: String
}

input SaveQuestionInput {
  slug: String!
  label: String!
  type: String!
  isRequired: String!
  isHidden: String!
  configuration: JSONString
  meta: JSONString
  clientMutationId: String
}

type SaveQuestionPayload {
  question: Question
  clientMutationId: String
}

type StringAnswer implements Answer & Node {
  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  meta: JSONString
  value: String!
}
